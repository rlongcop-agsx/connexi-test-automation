name: Robot Framework Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run_automation_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install Android SDK
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jdk wget unzip
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        mkdir -p $ANDROID_HOME/cmdline-tools
        unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
        mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30" "system-images;android-30;google_apis;arm64-v8a" "emulator"

    - name: Add Android SDK to PATH
      run: echo "${ANDROID_HOME}/platform-tools" >> $GITHUB_PATH

    - name: Set up emulator
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-30;google_apis;arm64-v8a" --device "pixel"
        $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-boot-anim -no-window -gpu off -no-accel -no-snapshot -writable-system -verbose &
        boot_completed=""
        timeout=0
        while [ "$boot_completed" != "1" ] && [ $timeout -lt 300 ]; do
            sleep 5
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            timeout=$((timeout + 5))
        done
        if [ "$boot_completed" != "1" ]; then
            echo "Emulator failed to boot within the timeout period."
            exit 1
        fi
        echo "Emulator booted successfully."
    

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Webdriver Manager
      run: |
        python -c "from webdriver_manager.microsoft import EdgeChromiumDriverManager; EdgeChromiumDriverManager().install()"

    - name: Run Robot Framework tests
      shell: bash
      run: |
        robot -d reports \
        -v BASE_URL:${{ secrets.BASE_URL }} \
        -v TABLEAU_URL:${{ secrets.TABLEAU_URL }} \
        -v ANALYTICS_EMAIL:${{ secrets.ANALYTICS_EMAIL }} \
        -v FORECASTING_EMAIL:${{ secrets.FORECASTING_EMAIL }} \
        -v INVENTORY_EMAIL:${{ secrets.INVENTORY_EMAIL }} \
        -v ORDERING_EMAIL:${{ secrets.ORDERING_EMAIL }} \
        -v PROCUREMENTSP_EMAIL:${{ secrets.PROCUREMENTSP_EMAIL }} \
        -v PROCUREMENT_EMAIL:${{ secrets.PROCUREMENT_EMAIL }} \
        -v QUALITYMANAGEMENT_EMAIL:${{ secrets.QUALITYMANAGEMENT_EMAIL }} \
        -v SUPPLYPLAN_EMAIL:${{ secrets.SUPPLYPLAN_EMAIL }} \
        -v VENDOR_EMAIL:${{ secrets.VENDOR_EMAIL }} \
        -i web \
        test-scenarios

    - name: Archive test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: reports/

  publish_test_report:
    runs-on: ubuntu-latest
    needs: [ run_automation_test ]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download test results artifact
      uses: actions/download-artifact@v4
      with:
        name: test-report
        path: ./reports

    - name: Publish test results as a GitHub Pages site
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: ${{ secrets.GH_PAGES_TOKEN }}
        external_repository: ${{ github.repository }}
        publish_dir: ./reports/
        publish_branch: gh-pages 
        commit_message: "Publish Connexi Report"
